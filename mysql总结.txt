mysql启动与停止：
windows：
             net start mysql80
             net stop mysql80
mysql客户端连接：
             mysql [-h 127.0.0.1] [-P 3306] -u root -p
windows：mysql -u root -p
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DCL普通开发人员知道就行，不用记：
1、用户管理：
创建用户：create user '用户名'@'主机名（即用户主机地址）' identified by '密码';
修改用户密码：alter user '用户名'@'主机名' identified with mysql_native_password by '密码';
删除用户：drop user '用户名'@'主机名';
2、权限控制：（在mysql中的user表）
给某用户增加某表的某个操作权限：grant 权限列表 on 数据库.表名 to '用户名'@'主机名';
给某用户删除某表的某个操作权限：revoke 权限列表 on 数据库.表名 from '用户名'@'主机名';
注意主机名使用%时表示全网可用
例子：
     建用户：                  create user 'kaipingren'@'127.0.0.1' identified by 'qq127468';    
     设置用户权限：         grant select on jiangmen.kaiping to 'kaipingren'@'127.0.0.1';
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DDL：定义数据库，表，字段
数据库：
         查询所有数据库： show databases;
         查询当前数据库： select database();
         创建数据库：        create datebase 数据库名;   ---->create database [ if not exists ] 数据库名 [ default charset 字符集 ] [ collate 排序规则 ];
         删除数据库：        drop database 数据库名;    ---->drop database [ if exists ] 数据库名;
         使用数据库：        use 数据库名;
例子：create  database  if  not  exists  class_teacher  default  charset  utf8mb4;

表：
         查询当前数据库所有表：show tables;
         查询表结构：                desc 表名;
         查询指定表的建表语句：show create table 表名;
         创建表：
            create table 表名(
                       字段1 字段1类型 [约束(约束条件)] [ comment 字段1注释 ],
                       字段1 字段2类型 [约束(约束条件)] [ comment 字段2注释 ],
                       字段1 字段3类型 [约束(约束条件)] [ comment 字段3注释 ],
                        。。。
                       字段n 字段n类型 [约束(约束条件)] [ comment 字段n注释 ]
            )[ comment 表注释 ];      
约束：可搭配使用（直接在后面加上即可）
          primary key :主键 （自增：auto_increment）
          foreign key :外键
          unique:       唯一约束（保证值不重复）
          check:         检查约束（保证值按照条件存储）
          not null:       非空约束（保证值不是空）
          default:        默认约束（当没有值时使用默认值,如default '1'）

          给表添加字段：              alter table 表名    add        字段名  类型(长度)   [ 约束(约束条件) ] [ comment 注释 ];
          修改字段的数据类型：    alter table 表名   modify    字段名  新数据类型(长度);
          修改字段名和数据类型： alter table 表名   change    旧字段名 新字段名  类型(长度) [ 约束(约束条件) ] [ comment 注释 ];
          给字段添加外键：           alter table 表名 add constraint  外键名称  foreign key (外键字段名)  references  主表列名;
          删除外键：                     alter table 表名 drop foreign key 外键名称;
          删除表中字段：              alter table 表名     drop        字段名;
          修改表名：                    alter table 表名  rename to   新表名;
          删除表：                       drop table [ if exists ]  表名;
          删除指定表，并重新创建该表：truncate table 表名;
       
例子：
            create table teacher_user(                                               
                       id  int comment '编号',                                    
                       name varchar(50)  comment '姓名',                  
                       age int comment '年龄',
                       gender varchar(1)  comment '性别'
            ) comment '用户表';  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DML：对表中的记录进行：增、删、改 （insert、update、delete）
增加：
             给指定字段添加值：   insert into 表名(字段名1，字段名2，。。。)    values(值1，值2，。。。);
             给全部字段添加值：   insert into 表名     values(值1，值2，。。。);
             给指定字段添加值：   insert into 表名(字段名1，字段名2,。。。)     values(值1，值2,。。。),(值1，值2,。。。)。。。;
             给全部字段添加值：   insert into 表名   values(值1，值2，。。。)，(值1，值2，。。。)。。。;   --->前面的(值1，值2，。。。)对应字段1
修改：   update 表名  set  字段1=值1,字段2=值2,。。。[ where 条件 ];
删除：   删除某行数据：delete from 表名 [where 条件]; 

例子：
            insert   into  techer_user( id,name,age,gender)   values(1,'hellokitty',26,'女');
            update techer_user set name='laoyuxiao' where id=1;
            delete from  techer_user where id=1;   
            update user  age = 16  where  name = '张三';
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
DQL：查
单表查询：
对单表进行查：
语法：     
              select    字段列表
                           from    表名列表
                                       where  条件列表 
                                                   group by  分组字段列表
                                                                   having  分组后条件列表
                                                                                order by  排序字段列表 [asc升序 desc降序]
                                                                                               limit  分页参数；
注意：该语句执行时的顺序是从where开始执行，而select在分组条件后，排序前执行

例子：从user表中找到id大于6且按年龄分组后性别全为男的员工组，然后选择员工年龄升序排序，年龄相同的按id降序排序，然后再跳过20条数据后的前2条数据查询
          select  name from user where id>6 group by age having gender='男' order by age asc,id desc limit 20,2;

	 设置字段别名：select  字段1  as 别名1，字段2  as 别名2  from  表名;
      	 去除重复：select   distinct   字段列表  from  表名;
     	 条件查询：select  字段列表  from  表名  where  条件列表；
     	 统计表中列的值：select  聚合函数(字段列表)  from  表名;     
注意：count为列中的总记录数、min/max分别为该列的值的最大值和最小值、avg为该列的值的平均值、sum为该列的值的和
例子：
        select  count  name  from  user;
        select  name  as  '人名'  from  user;

多表关系：
            一对一：设置主表外键foreign key时，再设置其是唯一约束 unique             （用户与用户详情）
            一对多：在多的一方建立外键，指向一的一方主键                                       （一个部门有多个员工）
            多对多：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键    （一个人学生可选择多门课，课可以被多个学生选择）

笛卡尔积：在多表查询时，查询结果是表1x表2的组合
                   消除笛卡尔积：select  *  from  表1, 表2  where  表1的字段=表2的字段;   ---->两个表是通过该字段连接在一起
多表查询的分类：1、连接查询  2、子查询
1、连接查询：
内连接：查询多表相互交集的部分数据
                  隐式内连接：select  字段列表  from  表1,表2,。。。where 条件列表;   ------>条件列表可以是表1字段=表2字段
                  显式内连接：select  字段列表  from  表1  join  表2  on  条件列表;    ------>条件列表可以是表1字段=表2字段
外连接：
左外连接：查询左表所有数据，以及两表交集部分数据
                 select  字段列表  from  左表  left  join  右表  on  条件列表; ------>条件列表可以是表1字段=表2字段

右外连接：查询右表所有数据，以及两表交集部分数据
                 select  字段列表  from  左表  right  join  右表  on  条件列表; ------>条件列表可以是表1字段=表2字段

自连接：当前表与自身的连接查询，自连接必须使用表的别名
                 select  字段列表  from  表x  别名A  表x  别名B  where 条件列表;     ------>条件列表可以是表1字段=表2字段
                 select  字段列表  from  表x  别名A  join  表x  别名B   on  条件列表;   ------>条件列表可以是表1字段=表2字段
联合查询（将多次查询的结果合并起来形成一个新的查询结果集）：
                  select  字段列表  from  表A ...  
                  union [all]                                                   ----->有all就不会去重复
                  select  字段列表 from 表B...;
注意：联合查询要保证两个分别查询的返回结果的字段列数和字段类型要一致
例子：
          select  a.name,  b.name  from  user a,  user b  where   a.menyid=b.yesid
          select * from user where id<2  union  select * from user where id>11;

2、子查询：sql语句(insert/update/delete/select)中嵌套select语句，称为子查询（嵌套查询）。
子查询出现在这三个位置：where之后、from之后、select之后
出现在where之后：      select  *  from  表1  where  字段1  =  (select  字段1  from 表2);   ---->(select  字段1  from 表2)是子查询
例子：                         select  *  from  user  where  id  > (select  techerid  from teacher_user);

分类：
标量子查询：子查询结果为单个值（ 操作符为：=、<>、<、<=、>、>= ）
select  *  from  表1  where  字段1  =  (select  字段1  from 表2);

列子查询：子查询结果为一列（ 操作符为：in、not in、any、some、all )
select  *  from  表1  where  字段1  >  all (select  字段1  from 表2 where ...	);

行字查询：子查询结果为一行（ 操作符为：=、<>、in、not in ）
select  *  from  表1  where  (字段1,字段2)  =  (select  字段1,字段2  from 表2  where 字段n=某值);

表子查询：子查询结果为多行多列（ 操作符为：in ）
select  *  from  表1  where  (字段1,字段2)  in  (select  字段1,字段2  from 表2  where 字段n<某值);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

使用函数（实际使用时，参数为字段+其他）

select  函数(参数)  from 表名;
update 表名  set 字段1=函数(参数);
字符串函数、数值函数、日期函数、流程函数	

例子：
          select  name  datediff(curdate(),entrydate)  from  user;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
事务就是把多个sql语句进行封装成一个事务
mysql的事务默认自动提交的
方法1：
设置mysql事务手动提交：
                             select @@autocommit;
                             set @@autocommit=0;
提交事务：commit;
回滚事务：rollback;

方法2：
开启事务：begin;
提交事务：commit;
回滚事务：rollback;

例子： 
              begin;        
              update user set money = money -1000 where name = '张三';
              rollback;
              update user set money = money +1000 where name = '李四';
              rollback;
              commit;




