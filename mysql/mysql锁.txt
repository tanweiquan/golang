锁是协调并发访问mysql的机制

1、全局锁：对整个数据库加锁，相当于给数据库中的所有表都加锁。加锁后整个实例就处于只读状态，只能执行DQL语句查询数据库，不能进行增删改操作。
使用场景是给全库做逻辑备份，通过对所有表加锁，从而获得一致性视图，保证数据的完整性。（例子是：转钱过程时备份，加锁防止业务操作）
全局锁的语法
                      加锁：   flush  tables  with  read lock;
            备份数据库：    mysqldump  [-h xxx.xxx.xxx] [-P xxxx]  -uroot -p123456  要被备份的数据库名  >  文件路径/文件名.sql   (这不是sql语句，不要在mysql里执行，直接在本机系统的shell里执行就行 )
                     解锁：   unlock  tables;
当然我们在备份时，可以通过加上参数  --single-transaction来完成不加锁的一致性备份：mysqldump   --single-transaction  -uroot -p123456  数据库名  >  文件路径/文件名.sql

[事务提交后会解锁]
2、表级锁，每次操作都会锁住整张表。
发生锁冲突的概率最高，并发度最低。应用在myisam、innodb、bdb等存储引擎中。
表级锁分类：表锁、元数据锁、意向锁

表锁：
表共享读锁：加了读锁后，只能读不能写；直到解锁后，才能写。
表独占写锁：加了写锁后，当前客户端能读能写，其他客户端不能读也不能写；直到解锁后其他客户端才能读写
语法
加锁：lock tables 表名...read/write;
解锁：unlock tables; (或者通过客户端断开连接解锁)

元数据锁MDL：
元数据锁时系统自动控制，不需要用户操作。作用是维护表结构数据的唯一性。当表有活动事务，不能做变更表操作。直到活动事务提交了，才能对表做变更操作。(这里的变更表的语句时指改表名、改字段名等操作)
总结：主要的作用是在事务中避免增删改语句与变更表的语句冲突，保证读写的正确性。

当一个会话开启一个事务，并执行增删改查语句时获得读锁(共享)，所有事务都能读能写。而另一个并发的会话执行表变更语句时获得写锁(排他)，不能变更表操作。要等到获得读锁(共享)的事务提交后才能执行表变革操作。

意向锁：
为了避免在执行增删改语句时，加的行锁和表锁冲突，在innodb中引入了意向锁，使表锁不用检查每行数据是否加了行锁，使用意向锁来减少锁的检查。
当一个事务根据索引执行增删改语句时，获得了行锁，然后通过语句接着添加意向锁，当另外并发的会话对表加表锁时，会找到意向锁，判断加的表锁是否兼容事务的意向锁，不兼容就等到事务提交后再加上表锁。
意向共享锁：由语句select ...lock in share mode添加。与表锁共享锁(读锁)兼容，与表锁排他锁(写锁)互斥。
意向排他锁：由insert、update、delete、select...for update添加。与表锁共享锁(读锁)及排他锁(写锁)都互斥。
意向锁之间不会互斥。             

3、行级锁
行级锁，每次操作锁住对应的行数据。发生锁冲突的概率最低，并发度最高，应用在innodb存储引擎中。
行级锁是基于索引，通过对索引上的索引项加锁来实现的，而不是对记录加的锁。
对于行级锁，分三类：
行锁：锁定单个记录的锁，防止其他事务对此进行update和delete。在读提交、可重复读隔离级别下都支持。
间隙锁：锁定索引记录间隙(不含该记录)，确保索引间隙不变，防止其他事务在这个间隙进行insert，产生幻读。在可重复读隔离级别下都支持。
临键锁：行锁和间隙组合，同时锁住数据，并锁住数据前面的间隙。在可重复读隔离级别下支持。

行锁：
共享锁：允许一个事务去读一行。一个事务获取了共享锁，其他事务就不能获取排他锁。（共享锁：select ...lock in share mode(手动)）【select不加任何锁】{可用于防止不可重复读}
排他锁：允许获得排他锁的事务更新数据。一个事务获取了排他锁，其他事务就不能获取共享锁和排他锁。 （加排他锁：增删改语句(自动)、select ... for update(手动)）

间隙锁/临键锁：可用于防止幻读
                当以唯一索引给不存在的记录加锁(增删改或手动select)时，会优化成间隙锁，锁住不存在数据两边两个行数据
                当以非唯一索引的普通索引给(增删改或手动select)时，当下一行的索引不满足查询条件时，会由临键锁退化成间隙锁
                当以唯一索引进行范围访问时，也会加上临键锁。



 