存储过程：sql语言层面的代码封装和重用。
即把几个sql语句封装在一起，然后放在数据库上，当sql操作时，直接调用数据库上封装的sql语句即可。减少了数据(sql语句)在数据库和应用服务器之间的传输。

1、创建：
create  procedure  存储过程名称([参数列表])
begin 
              ---多个sql语句;
end;

2、调用：
call  存储过程名称([参数]);

3、删除：
        drop  procedure  [if exists]  存储过程名称;
4、其他
查看指定数据库的存储过程及状态信息：
         select  *  from  information_schema.routines  where  routine_schema ='数据库名';
查看查询过程的定义：
        show  create  procedure  存储过程名称;
##################################################
变量：系统变量、用户变量和局部变量
1、系统变量（系统变量全是固定的，只能改值，不能定义）
系统变量的分类：
       全局系统：global
       会话系统：session
没指定时默认是session
                        查看所有系统变量：   show  [global | session] variables;
                        模糊查找系统变量：   show  [global | session] variables like '...';
                        查看指定系统变量：   select @@[global | session] 系统变量名;
设置系统
set [global | session] 系统变量名 = 值;

2、用户定义变量：就算不赋值也不会报错，作用域是当前连接
赋值：
         set  @变量名 :=值;
         select 字段名  into 变量名 from 表名...;   (将查询结果赋值给变量)
使用：
         select  @变量名1,@变量名2;

3、局部变量：访问前要declare声明，作用范围在begin~end块内
声明：
        declare  变量名  变量类型 [default 变量默认值];    (变量类型：int、bigint、char、varchar、date、time等)
#值的类型要与变量的类型一致。
赋值：
        set  变量名 := 值;
        select 字段名  into 变量名 from 表名...;  (将查询结果赋值给变量)
查看：
       select  变量;

4、参数
参数
         in：输入参数，需要在调用时传入值
       out：输出参数，也就是作为调用后的返回值
    inout：既可以作为输入参数，也可以作为输出参数
用法：
create  procedure  存储过程名称([in | out | inout  参数名  参数类型]) 
begin 
        ---sql语句
end;
#参数类型是int、char、varchar等
5、游标
游标是用来存储查询结果集的数据类型。即游标是一种数据类型，是查询结果集类型。
声明游标
declare  游标名称  cursor  for  查询语句;
打开游标
open  游标名称;
获取游标记录，赋值给变量
fetch 游标名称  into 变量1,变量2...;
关闭游标：
close  游标名称;
6、条件处理
declare  行动  handler for  状态值  要执行的操作；
行动
       continue:继续      exit:终止执行
状态值
          sqlstate  状态码：如sqlstate  '02000'
          sqlwarning：所有以01开头的sqlstate代码的简写
          not  found：所有以02开头的sqlstate代码的简写
          sqlexception：所有没有被sqlwarning或者not found捕获的sqlstate代码的简写
									 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

存储过程常用语法：
1、if
语法：
if  条件1  then
        。。。
elseif  条件2  then 
        。。。
else 
        。。。
end if;

2、case
语法一：
case 值
       when 值1 then  sql语句1
       when 值2 then  sql语句2
       else sql语句n
end case;
语法二：
case  
       when 条件1  then  sql语句1
       when 条件2  then  sql语句2
       else  sql语句1
end case;

3、while循环
先判断条件，为true则执行语句，否则不执行。
语法：
while 条件 do
       sql逻辑。。。
end while;

4、repeat循环
先执行一次，判断条件是否满足，当满足条件就退出循环，不满足继续循环执行
语法：
repeat 
        sql逻辑。。。
        until  条件
end  repeat;

5、loop
不加退出条件会进入死循环。
leave:配合循环使用，退出循环。									
iterate:必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一次循环。
语法：
#创建循环
[标签:]loop
           sql逻辑。。。
end loop [标签];

#退出指定标记的循环体:
                                   leave  标签;
#直接进入下一次循环:
                                   iterate  标签;
														
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
存储函数
存储函数是有返回值的存储过程，存储函数的参数只能是in类型。所以不用指定了。
语法：
create  function  函数名([参数列表])
returns  返回值类型  [传入参数的特性...]
begin  
        ---sql语句
       return...;
end;
调用
select  函数名(参数);
#传入参数的特性说明：
determinstic:相同的输入参数总是产生相同的结果
no sql：不包含sql语句
reads sql data：包含读取数据的语句，但不包含写入数据的语句。
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

触发器：
触发器是与表有关的数据库对象，指在增删改之前或之后，触发并执行触发器中定义的sql语句集合。
insert型触发器：new表示将要或者已经新增的数据
update型触发器：old表示修改之前的数据，new表示将要或已经修改后的数据
delete型触发器：old表示将要或已经删除的数据
触发器语法：
创建 
create   trigger 触发器名称
before/after  insert/update/delete  on 表名 for each row   ---行级触发器
begin
         ---触发器逻辑
end;
查看
show  triggers;
删除
drop trigger [数据库名] 触发器名;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

例子：查分数的级别
create  procedure  p1()
begin 
      declare  score  int  default  58;
      declare  result  varchar(10);
      if  score >=85 then 
            set  result := '优秀';
      elseif  score >=60 then 
            set  result := 及格';
      else
            set  result :='不及格';
      end  if;
      select  result;
end；

call  p1();

例子：
#查分数的级别 
create  procedure  p1(in score int,out result varchar(10))
begin 
      if  score >=85 then 
            set  result := '优秀';
      elseif  score >=60 then 
            set  result := '及格';
      else
            set  result :='不及格';
      end  if;
end；

call  p1(68,@result); 
select @result; 

#分数换算，200分制换算为100分制
create procedure p1(inout score  double)
begin 
       set  score :=score * 0.5;
end;
set @score = 78;

call p1(@score);
select @score;

例子：判断月份所属季度
create  procedure  p1(in month int)
begin 
     declare  result varchar(10);
     case 
            when month >=1 and month<=3 then
                    set  result :='第一季度';
            when month >=4 and month<=6 then
                    set  result :='第二季度';
            when month >=7 and month<=9 then
                    set  result :='第三季度';
            when month >=10 and month<=12 then
                    set  result :='第四季度';
            else 
                    set result :='非法参数';
     end case;
select concat('您输入的月份为：', month,',所属的季度为：',result);
end;

call p1(4);

例子：计算从1累加到n的值，n为传入的参数值。
create  procedure  p1(in n int)
begin 
       declare  total  int  default 0;
        while  n>0  do
               set  total :=total +n;
               set n:= n-1;
       end while;
       select total;
end;

call p1(10);

例子：计算从1累加到n的值，n为传入的参数值。
create  procedure  p1(in n int)
begin 
        declare  total int default 0;
        repeat
              set  total :=total +n;
              set n:=n-1;
        until  n<=0
        end repeat;
        select total;
end;

call p1(10);

例子：计算从1累加到n的值，n为传入的参数值。
create  procedure p1(in n int)
begin 
       declare  total int default 0;
       sum:loop
               if  n<=0  then
                      leave  sum;
               end if;
               set  total := total +n;
               set  n :=n-1;
        end loop sum;
        select total;
end;

call p1(10);

例子：
create  procedure  p1(in uage int)
begin 
     declare  uid  varchar(10);
     declare  uname  int;
     declare  u_cursor  cursor  for  select id name from tb_user where id<=25;
     declare  exit  handler  for  sqlstate '02000' close u_cursor;  --->条件处理，sqlstate '02000'等于not found
     create table  if  not exists tb_user_pro(
                           id  int primary  key auto_increment,
                           name varchar(10),
     );
     open u_cursor;
     while true do 
              fetch   u_cursor  into uname,upro;
              insert into tb_user_pro values(null,uid,uname);
     end while;
     close u_cursor;
end;

p1(10)
例子：从1到n累加
create  function  f1(n int)
returns  int  determinstic
begin
       declare  total int default 0;
       while n>0  do
                set  total  := total +n;
                set  n:= n-1;
       end while;
       return total;
end;

select  f1(10);

例子：创建user表的insert触发器，并将nsert之后的数据放到insert_log表中
create table insert_logs();---建表
create trigger user_insert_trigger
         after  insert  on  user  for  each row
begin 
         insert  into  insert_log(id,operation,optime,op_id,op_name)  values(null,'insert',now(),new.id,new.name);
end;
show triggers;
例子：创建user表的update触发器，并将update之前及之后的数据放到update_log表中
create trigger user_update_trigger
         after  update  on  user  for  each row
begin 
         insert  into  update_log(id,operation,optime,op_id,op_name,op_string)  values(null,'update',now(),old.id,old.name,concat('更新后：id=',new.id,'name=',new.name));
end;
show triggers; 
例子：创建user表的delete触发器，并将delete之前的数据放到delete_log表中
create trigger user_delete_trigger
         after  delete  on  user  for  each row
begin 
         insert  into  delete_log(id,operation,optime,op_id,op_name)  values(null,'delete',now(),old.id,old.name);
end;
show triggers; 

         


